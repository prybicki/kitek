// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_EngCtl;
class Command_EngCtlDefaultTypeInternal;
extern Command_EngCtlDefaultTypeInternal _Command_EngCtl_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ConfigPID;
class ConfigPIDDefaultTypeInternal;
extern ConfigPIDDefaultTypeInternal _ConfigPID_default_instance_;
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
class Feedback_WheelState;
class Feedback_WheelStateDefaultTypeInternal;
extern Feedback_WheelStateDefaultTypeInternal _Feedback_WheelState_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
template<> ::Command_EngCtl* Arena::CreateMaybeMessage<::Command_EngCtl>(Arena*);
template<> ::Config* Arena::CreateMaybeMessage<::Config>(Arena*);
template<> ::ConfigPID* Arena::CreateMaybeMessage<::ConfigPID>(Arena*);
template<> ::Feedback* Arena::CreateMaybeMessage<::Feedback>(Arena*);
template<> ::Feedback_WheelState* Arena::CreateMaybeMessage<::Feedback_WheelState>(Arena*);
template<> ::Point2D* Arena::CreateMaybeMessage<::Point2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Side : int {
  LEFT = 0,
  RIGHT = 1,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Side_IsValid(int value);
constexpr Side Side_MIN = LEFT;
constexpr Side Side_MAX = RIGHT;
constexpr int Side_ARRAYSIZE = Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor();
template<typename T>
inline const std::string& Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Side_descriptor(), enum_t_value);
}
inline bool Side_Parse(
    const std::string& name, Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
// ===================================================================

class Command_EngCtl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.EngCtl) */ {
 public:
  Command_EngCtl();
  virtual ~Command_EngCtl();

  Command_EngCtl(const Command_EngCtl& from);
  Command_EngCtl(Command_EngCtl&& from) noexcept
    : Command_EngCtl() {
    *this = ::std::move(from);
  }

  inline Command_EngCtl& operator=(const Command_EngCtl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_EngCtl& operator=(Command_EngCtl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command_EngCtl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_EngCtl* internal_default_instance() {
    return reinterpret_cast<const Command_EngCtl*>(
               &_Command_EngCtl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command_EngCtl& a, Command_EngCtl& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_EngCtl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command_EngCtl* New() const final {
    return CreateMaybeMessage<Command_EngCtl>(nullptr);
  }

  Command_EngCtl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command_EngCtl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command_EngCtl& from);
  void MergeFrom(const Command_EngCtl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_EngCtl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.EngCtl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSideFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .Side side = 1;
  void clear_side();
  ::Side side() const;
  void set_side(::Side value);
  private:
  ::Side _internal_side() const;
  void _internal_set_side(::Side value);
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:Command.EngCtl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int side_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  enum CmdCase {
    kSetPWM = 1,
    kSetSpeed = 2,
    CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Command_EngCtl EngCtl;

  // accessors -------------------------------------------------------

  enum : int {
    kSetPWMFieldNumber = 1,
    kSetSpeedFieldNumber = 2,
  };
  // .Command.EngCtl setPWM = 1;
  bool has_setpwm() const;
  private:
  bool _internal_has_setpwm() const;
  public:
  void clear_setpwm();
  const ::Command_EngCtl& setpwm() const;
  ::Command_EngCtl* release_setpwm();
  ::Command_EngCtl* mutable_setpwm();
  void set_allocated_setpwm(::Command_EngCtl* setpwm);
  private:
  const ::Command_EngCtl& _internal_setpwm() const;
  ::Command_EngCtl* _internal_mutable_setpwm();
  public:

  // .Command.EngCtl setSpeed = 2;
  bool has_setspeed() const;
  private:
  bool _internal_has_setspeed() const;
  public:
  void clear_setspeed();
  const ::Command_EngCtl& setspeed() const;
  ::Command_EngCtl* release_setspeed();
  ::Command_EngCtl* mutable_setspeed();
  void set_allocated_setspeed(::Command_EngCtl* setspeed);
  private:
  const ::Command_EngCtl& _internal_setspeed() const;
  ::Command_EngCtl* _internal_mutable_setspeed();
  public:

  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:Command)
 private:
  class _Internal;
  void set_has_setpwm();
  void set_has_setspeed();

  inline bool has_cmd() const;
  inline void clear_has_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union CmdUnion {
    CmdUnion() {}
    ::Command_EngCtl* setpwm_;
    ::Command_EngCtl* setspeed_;
  } cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Feedback_WheelState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Feedback.WheelState) */ {
 public:
  Feedback_WheelState();
  virtual ~Feedback_WheelState();

  Feedback_WheelState(const Feedback_WheelState& from);
  Feedback_WheelState(Feedback_WheelState&& from) noexcept
    : Feedback_WheelState() {
    *this = ::std::move(from);
  }

  inline Feedback_WheelState& operator=(const Feedback_WheelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feedback_WheelState& operator=(Feedback_WheelState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feedback_WheelState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback_WheelState* internal_default_instance() {
    return reinterpret_cast<const Feedback_WheelState*>(
               &_Feedback_WheelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feedback_WheelState& a, Feedback_WheelState& b) {
    a.Swap(&b);
  }
  inline void Swap(Feedback_WheelState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feedback_WheelState* New() const final {
    return CreateMaybeMessage<Feedback_WheelState>(nullptr);
  }

  Feedback_WheelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feedback_WheelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feedback_WheelState& from);
  void MergeFrom(const Feedback_WheelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback_WheelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Feedback.WheelState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSideFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kMileageFieldNumber = 3,
  };
  // .Side side = 1;
  void clear_side();
  ::Side side() const;
  void set_side(::Side value);
  private:
  ::Side _internal_side() const;
  void _internal_set_side(::Side value);
  public:

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float mileage = 3;
  void clear_mileage();
  float mileage() const;
  void set_mileage(float value);
  private:
  float _internal_mileage() const;
  void _internal_set_mileage(float value);
  public:

  // @@protoc_insertion_point(class_scope:Feedback.WheelState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int side_;
  float speed_;
  float mileage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Feedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);
  Feedback(Feedback&& from) noexcept
    : Feedback() {
    *this = ::std::move(from);
  }

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feedback& operator=(Feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feedback& default_instance();

  enum FbCase {
    kWheelState = 1,
    FB_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Feedback& a, Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(Feedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feedback* New() const final {
    return CreateMaybeMessage<Feedback>(nullptr);
  }

  Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Feedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Feedback_WheelState WheelState;

  // accessors -------------------------------------------------------

  enum : int {
    kWheelStateFieldNumber = 1,
  };
  // .Feedback.WheelState wheelState = 1;
  bool has_wheelstate() const;
  private:
  bool _internal_has_wheelstate() const;
  public:
  void clear_wheelstate();
  const ::Feedback_WheelState& wheelstate() const;
  ::Feedback_WheelState* release_wheelstate();
  ::Feedback_WheelState* mutable_wheelstate();
  void set_allocated_wheelstate(::Feedback_WheelState* wheelstate);
  private:
  const ::Feedback_WheelState& _internal_wheelstate() const;
  ::Feedback_WheelState* _internal_mutable_wheelstate();
  public:

  void clear_fb();
  FbCase fb_case() const;
  // @@protoc_insertion_point(class_scope:Feedback)
 private:
  class _Internal;
  void set_has_wheelstate();

  inline bool has_fb() const;
  inline void clear_has_fb();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union FbUnion {
    FbUnion() {}
    ::Feedback_WheelState* wheelstate_;
  } fb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ConfigPID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigPID) */ {
 public:
  ConfigPID();
  virtual ~ConfigPID();

  ConfigPID(const ConfigPID& from);
  ConfigPID(ConfigPID&& from) noexcept
    : ConfigPID() {
    *this = ::std::move(from);
  }

  inline ConfigPID& operator=(const ConfigPID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigPID& operator=(ConfigPID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigPID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPID* internal_default_instance() {
    return reinterpret_cast<const ConfigPID*>(
               &_ConfigPID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConfigPID& a, ConfigPID& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigPID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigPID* New() const final {
    return CreateMaybeMessage<ConfigPID>(nullptr);
  }

  ConfigPID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigPID& from);
  void MergeFrom(const ConfigPID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigPID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kIFieldNumber = 2,
    kDFieldNumber = 3,
    kMinOutFieldNumber = 4,
    kMaxOutFieldNumber = 5,
  };
  // float p = 1;
  void clear_p();
  float p() const;
  void set_p(float value);
  private:
  float _internal_p() const;
  void _internal_set_p(float value);
  public:

  // float i = 2;
  void clear_i();
  float i() const;
  void set_i(float value);
  private:
  float _internal_i() const;
  void _internal_set_i(float value);
  public:

  // float d = 3;
  void clear_d();
  float d() const;
  void set_d(float value);
  private:
  float _internal_d() const;
  void _internal_set_d(float value);
  public:

  // float minOut = 4;
  void clear_minout();
  float minout() const;
  void set_minout(float value);
  private:
  float _internal_minout() const;
  void _internal_set_minout(float value);
  public:

  // float maxOut = 5;
  void clear_maxout();
  float maxout() const;
  void set_maxout(float value);
  private:
  float _internal_maxout() const;
  void _internal_set_maxout(float value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigPID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float p_;
  float i_;
  float d_;
  float minout_;
  float maxout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 2,
    kTicksPerSecFieldNumber = 1,
  };
  // .ConfigPID pid = 2;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const ::ConfigPID& pid() const;
  ::ConfigPID* release_pid();
  ::ConfigPID* mutable_pid();
  void set_allocated_pid(::ConfigPID* pid);
  private:
  const ::ConfigPID& _internal_pid() const;
  ::ConfigPID* _internal_mutable_pid();
  public:

  // float ticksPerSec = 1;
  void clear_tickspersec();
  float tickspersec() const;
  void set_tickspersec(float value);
  private:
  float _internal_tickspersec() const;
  void _internal_set_tickspersec(float value);
  public:

  // @@protoc_insertion_point(class_scope:Config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ConfigPID* pid_;
  float tickspersec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Point2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Point2D) */ {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Point2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Protocol_2eproto);
    return ::descriptor_table_Protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Point2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_EngCtl

// .Side side = 1;
inline void Command_EngCtl::clear_side() {
  side_ = 0;
}
inline ::Side Command_EngCtl::_internal_side() const {
  return static_cast< ::Side >(side_);
}
inline ::Side Command_EngCtl::side() const {
  // @@protoc_insertion_point(field_get:Command.EngCtl.side)
  return _internal_side();
}
inline void Command_EngCtl::_internal_set_side(::Side value) {
  
  side_ = value;
}
inline void Command_EngCtl::set_side(::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Command.EngCtl.side)
}

// float value = 2;
inline void Command_EngCtl::clear_value() {
  value_ = 0;
}
inline float Command_EngCtl::_internal_value() const {
  return value_;
}
inline float Command_EngCtl::value() const {
  // @@protoc_insertion_point(field_get:Command.EngCtl.value)
  return _internal_value();
}
inline void Command_EngCtl::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Command_EngCtl::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Command.EngCtl.value)
}

// -------------------------------------------------------------------

// Command

// .Command.EngCtl setPWM = 1;
inline bool Command::_internal_has_setpwm() const {
  return cmd_case() == kSetPWM;
}
inline bool Command::has_setpwm() const {
  return _internal_has_setpwm();
}
inline void Command::set_has_setpwm() {
  _oneof_case_[0] = kSetPWM;
}
inline void Command::clear_setpwm() {
  if (_internal_has_setpwm()) {
    delete cmd_.setpwm_;
    clear_has_cmd();
  }
}
inline ::Command_EngCtl* Command::release_setpwm() {
  // @@protoc_insertion_point(field_release:Command.setPWM)
  if (_internal_has_setpwm()) {
    clear_has_cmd();
      ::Command_EngCtl* temp = cmd_.setpwm_;
    cmd_.setpwm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_EngCtl& Command::_internal_setpwm() const {
  return _internal_has_setpwm()
      ? *cmd_.setpwm_
      : *reinterpret_cast< ::Command_EngCtl*>(&::_Command_EngCtl_default_instance_);
}
inline const ::Command_EngCtl& Command::setpwm() const {
  // @@protoc_insertion_point(field_get:Command.setPWM)
  return _internal_setpwm();
}
inline ::Command_EngCtl* Command::_internal_mutable_setpwm() {
  if (!_internal_has_setpwm()) {
    clear_cmd();
    set_has_setpwm();
    cmd_.setpwm_ = CreateMaybeMessage< ::Command_EngCtl >(
        GetArenaNoVirtual());
  }
  return cmd_.setpwm_;
}
inline ::Command_EngCtl* Command::mutable_setpwm() {
  // @@protoc_insertion_point(field_mutable:Command.setPWM)
  return _internal_mutable_setpwm();
}

// .Command.EngCtl setSpeed = 2;
inline bool Command::_internal_has_setspeed() const {
  return cmd_case() == kSetSpeed;
}
inline bool Command::has_setspeed() const {
  return _internal_has_setspeed();
}
inline void Command::set_has_setspeed() {
  _oneof_case_[0] = kSetSpeed;
}
inline void Command::clear_setspeed() {
  if (_internal_has_setspeed()) {
    delete cmd_.setspeed_;
    clear_has_cmd();
  }
}
inline ::Command_EngCtl* Command::release_setspeed() {
  // @@protoc_insertion_point(field_release:Command.setSpeed)
  if (_internal_has_setspeed()) {
    clear_has_cmd();
      ::Command_EngCtl* temp = cmd_.setspeed_;
    cmd_.setspeed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_EngCtl& Command::_internal_setspeed() const {
  return _internal_has_setspeed()
      ? *cmd_.setspeed_
      : *reinterpret_cast< ::Command_EngCtl*>(&::_Command_EngCtl_default_instance_);
}
inline const ::Command_EngCtl& Command::setspeed() const {
  // @@protoc_insertion_point(field_get:Command.setSpeed)
  return _internal_setspeed();
}
inline ::Command_EngCtl* Command::_internal_mutable_setspeed() {
  if (!_internal_has_setspeed()) {
    clear_cmd();
    set_has_setspeed();
    cmd_.setspeed_ = CreateMaybeMessage< ::Command_EngCtl >(
        GetArenaNoVirtual());
  }
  return cmd_.setspeed_;
}
inline ::Command_EngCtl* Command::mutable_setspeed() {
  // @@protoc_insertion_point(field_mutable:Command.setSpeed)
  return _internal_mutable_setspeed();
}

inline bool Command::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Command::clear_has_cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
inline Command::CmdCase Command::cmd_case() const {
  return Command::CmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Feedback_WheelState

// .Side side = 1;
inline void Feedback_WheelState::clear_side() {
  side_ = 0;
}
inline ::Side Feedback_WheelState::_internal_side() const {
  return static_cast< ::Side >(side_);
}
inline ::Side Feedback_WheelState::side() const {
  // @@protoc_insertion_point(field_get:Feedback.WheelState.side)
  return _internal_side();
}
inline void Feedback_WheelState::_internal_set_side(::Side value) {
  
  side_ = value;
}
inline void Feedback_WheelState::set_side(::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Feedback.WheelState.side)
}

// float speed = 2;
inline void Feedback_WheelState::clear_speed() {
  speed_ = 0;
}
inline float Feedback_WheelState::_internal_speed() const {
  return speed_;
}
inline float Feedback_WheelState::speed() const {
  // @@protoc_insertion_point(field_get:Feedback.WheelState.speed)
  return _internal_speed();
}
inline void Feedback_WheelState::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void Feedback_WheelState::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Feedback.WheelState.speed)
}

// float mileage = 3;
inline void Feedback_WheelState::clear_mileage() {
  mileage_ = 0;
}
inline float Feedback_WheelState::_internal_mileage() const {
  return mileage_;
}
inline float Feedback_WheelState::mileage() const {
  // @@protoc_insertion_point(field_get:Feedback.WheelState.mileage)
  return _internal_mileage();
}
inline void Feedback_WheelState::_internal_set_mileage(float value) {
  
  mileage_ = value;
}
inline void Feedback_WheelState::set_mileage(float value) {
  _internal_set_mileage(value);
  // @@protoc_insertion_point(field_set:Feedback.WheelState.mileage)
}

// -------------------------------------------------------------------

// Feedback

// .Feedback.WheelState wheelState = 1;
inline bool Feedback::_internal_has_wheelstate() const {
  return fb_case() == kWheelState;
}
inline bool Feedback::has_wheelstate() const {
  return _internal_has_wheelstate();
}
inline void Feedback::set_has_wheelstate() {
  _oneof_case_[0] = kWheelState;
}
inline void Feedback::clear_wheelstate() {
  if (_internal_has_wheelstate()) {
    delete fb_.wheelstate_;
    clear_has_fb();
  }
}
inline ::Feedback_WheelState* Feedback::release_wheelstate() {
  // @@protoc_insertion_point(field_release:Feedback.wheelState)
  if (_internal_has_wheelstate()) {
    clear_has_fb();
      ::Feedback_WheelState* temp = fb_.wheelstate_;
    fb_.wheelstate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Feedback_WheelState& Feedback::_internal_wheelstate() const {
  return _internal_has_wheelstate()
      ? *fb_.wheelstate_
      : *reinterpret_cast< ::Feedback_WheelState*>(&::_Feedback_WheelState_default_instance_);
}
inline const ::Feedback_WheelState& Feedback::wheelstate() const {
  // @@protoc_insertion_point(field_get:Feedback.wheelState)
  return _internal_wheelstate();
}
inline ::Feedback_WheelState* Feedback::_internal_mutable_wheelstate() {
  if (!_internal_has_wheelstate()) {
    clear_fb();
    set_has_wheelstate();
    fb_.wheelstate_ = CreateMaybeMessage< ::Feedback_WheelState >(
        GetArenaNoVirtual());
  }
  return fb_.wheelstate_;
}
inline ::Feedback_WheelState* Feedback::mutable_wheelstate() {
  // @@protoc_insertion_point(field_mutable:Feedback.wheelState)
  return _internal_mutable_wheelstate();
}

inline bool Feedback::has_fb() const {
  return fb_case() != FB_NOT_SET;
}
inline void Feedback::clear_has_fb() {
  _oneof_case_[0] = FB_NOT_SET;
}
inline Feedback::FbCase Feedback::fb_case() const {
  return Feedback::FbCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigPID

// float p = 1;
inline void ConfigPID::clear_p() {
  p_ = 0;
}
inline float ConfigPID::_internal_p() const {
  return p_;
}
inline float ConfigPID::p() const {
  // @@protoc_insertion_point(field_get:ConfigPID.p)
  return _internal_p();
}
inline void ConfigPID::_internal_set_p(float value) {
  
  p_ = value;
}
inline void ConfigPID::set_p(float value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:ConfigPID.p)
}

// float i = 2;
inline void ConfigPID::clear_i() {
  i_ = 0;
}
inline float ConfigPID::_internal_i() const {
  return i_;
}
inline float ConfigPID::i() const {
  // @@protoc_insertion_point(field_get:ConfigPID.i)
  return _internal_i();
}
inline void ConfigPID::_internal_set_i(float value) {
  
  i_ = value;
}
inline void ConfigPID::set_i(float value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:ConfigPID.i)
}

// float d = 3;
inline void ConfigPID::clear_d() {
  d_ = 0;
}
inline float ConfigPID::_internal_d() const {
  return d_;
}
inline float ConfigPID::d() const {
  // @@protoc_insertion_point(field_get:ConfigPID.d)
  return _internal_d();
}
inline void ConfigPID::_internal_set_d(float value) {
  
  d_ = value;
}
inline void ConfigPID::set_d(float value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:ConfigPID.d)
}

// float minOut = 4;
inline void ConfigPID::clear_minout() {
  minout_ = 0;
}
inline float ConfigPID::_internal_minout() const {
  return minout_;
}
inline float ConfigPID::minout() const {
  // @@protoc_insertion_point(field_get:ConfigPID.minOut)
  return _internal_minout();
}
inline void ConfigPID::_internal_set_minout(float value) {
  
  minout_ = value;
}
inline void ConfigPID::set_minout(float value) {
  _internal_set_minout(value);
  // @@protoc_insertion_point(field_set:ConfigPID.minOut)
}

// float maxOut = 5;
inline void ConfigPID::clear_maxout() {
  maxout_ = 0;
}
inline float ConfigPID::_internal_maxout() const {
  return maxout_;
}
inline float ConfigPID::maxout() const {
  // @@protoc_insertion_point(field_get:ConfigPID.maxOut)
  return _internal_maxout();
}
inline void ConfigPID::_internal_set_maxout(float value) {
  
  maxout_ = value;
}
inline void ConfigPID::set_maxout(float value) {
  _internal_set_maxout(value);
  // @@protoc_insertion_point(field_set:ConfigPID.maxOut)
}

// -------------------------------------------------------------------

// Config

// float ticksPerSec = 1;
inline void Config::clear_tickspersec() {
  tickspersec_ = 0;
}
inline float Config::_internal_tickspersec() const {
  return tickspersec_;
}
inline float Config::tickspersec() const {
  // @@protoc_insertion_point(field_get:Config.ticksPerSec)
  return _internal_tickspersec();
}
inline void Config::_internal_set_tickspersec(float value) {
  
  tickspersec_ = value;
}
inline void Config::set_tickspersec(float value) {
  _internal_set_tickspersec(value);
  // @@protoc_insertion_point(field_set:Config.ticksPerSec)
}

// .ConfigPID pid = 2;
inline bool Config::_internal_has_pid() const {
  return this != internal_default_instance() && pid_ != nullptr;
}
inline bool Config::has_pid() const {
  return _internal_has_pid();
}
inline void Config::clear_pid() {
  if (GetArenaNoVirtual() == nullptr && pid_ != nullptr) {
    delete pid_;
  }
  pid_ = nullptr;
}
inline const ::ConfigPID& Config::_internal_pid() const {
  const ::ConfigPID* p = pid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConfigPID*>(
      &::_ConfigPID_default_instance_);
}
inline const ::ConfigPID& Config::pid() const {
  // @@protoc_insertion_point(field_get:Config.pid)
  return _internal_pid();
}
inline ::ConfigPID* Config::release_pid() {
  // @@protoc_insertion_point(field_release:Config.pid)
  
  ::ConfigPID* temp = pid_;
  pid_ = nullptr;
  return temp;
}
inline ::ConfigPID* Config::_internal_mutable_pid() {
  
  if (pid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConfigPID>(GetArenaNoVirtual());
    pid_ = p;
  }
  return pid_;
}
inline ::ConfigPID* Config::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:Config.pid)
  return _internal_mutable_pid();
}
inline void Config::set_allocated_pid(::ConfigPID* pid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pid_;
  }
  if (pid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pid, submessage_arena);
    }
    
  } else {
    
  }
  pid_ = pid;
  // @@protoc_insertion_point(field_set_allocated:Config.pid)
}

// -------------------------------------------------------------------

// Point2D

// float x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline float Point2D::_internal_x() const {
  return x_;
}
inline float Point2D::x() const {
  // @@protoc_insertion_point(field_get:Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Point2D.x)
}

// float y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline float Point2D::_internal_y() const {
  return y_;
}
inline float Point2D::y() const {
  // @@protoc_insertion_point(field_get:Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Point2D.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Side>() {
  return ::Side_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
